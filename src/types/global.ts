export enum RewardType {
  ETH = 0,
  USDC = 1,
  ERC20 = 2,
  NFT = 3,
}

export interface DropInfo {
  id: number;
  host: string;
  sponsor: string;
  entryFee: string; // Formatted string for display
  rewardAmount: string; // Formatted string for display (e.g., "1.0 ETH", "100 TKN", "1 NFT")

  // Raw values needed for transactions or precise calculations if kept
  rawEntryFee?: bigint;
  rawRewardAmount?: bigint;

  rewardToken: string; // `0x${string}` for ERC20/NFT, zero address for ETH
  rewardType: RewardType;
  rewardTokenIds: string[]; // For NFTs

  maxParticipants: number;
  currentParticipants: number;
  isActive: boolean;
  isCompleted: boolean;
  isPaidEntry: boolean;
  isManualSelection: boolean;
  isSponsored: boolean;
  numWinners: number;
  fundingDeadline: number;
  winners: string[];
}

export interface Participant {
  address: string;
  name: string;
  slot: number;
}

// New interface to detail each type of prize won
export interface PrizeDetail {
  type: RewardType;
  // For ETH/ERC20, 'amount' is the formatted string like "1.0 ETH" or "100 TKN"
  // For NFT, 'amount' could be the count, e.g., "1 NFT" or "NFT" and count is implicit by array length
  amountFormatted: string;
  rawValue?: bigint; // Raw amount in smallest unit for ETH/ERC20
  tokenAddress?: `0x${string}`;
  tokenSymbol?: string; // e.g., "ETH", "USDC", "MYTKN"
  tokenId?: string; // For individual NFTs, if tracking them
}

export interface LeaderboardEntry {
  address: string;
  wins: number;
  // Stores an aggregated list of different types of prizes won
  prizesWon: PrizeDetail[];
  // Optional: A summary string for quick display, e.g., "1 ETH, 2 NFTs"
  // This would be generated by the getLeaderboard function.
  prizeSummary?: string;
}

export interface DropRewardDetails {
  dropId: string | number;
  rewardToken: string;
  rewardType: RewardType;
  rewardTokenIds: string[];
  rawRewardAmount?: string;
  rawEntryFee?: string;
}

export interface FarcasterUserProfile {
  fid?: number; // Farcaster ID
  username: string | null; // Preferred Farcaster username (e.g., from farcaster.xyz)
  displayName: string | null; // Farcaster display name
  pfpUrl: string | null;
  custodyAddress?: string; // The address this profile is linked to
  // You can add other fields like bio, follower count, etc., if your API provides them
}
